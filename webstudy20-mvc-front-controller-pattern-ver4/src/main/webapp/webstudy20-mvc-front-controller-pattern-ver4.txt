**Servlet 기본 개념**

HTTP : HyperText Transfer Protocol 웹 통신 규약
HTTPS : HTTP Secure -> 보안  http protocol 의 보안 , 암호화된 버전 

Web Server : HTTP 에 의거해 HTML(html,css,javascript) 문서를 서비스 하는 서버 
				웹 브라우저 클라이언트에 정적인 컨텐트를 서비스하는 서버 

Web Application Server ( WAS ) : Web Server + Web Container 	
									   데이터베이스 서버 및 타 서버와 연동 
									   다양한 비즈니스 로직을 처리하여
									   동적인 컨텐트를 클라이언트에게 제공하는 웹 어플리케이션 서버			
		  
Web Container : java web 기술인 Servlet 과 JSP 가 실행되는 환경 제공 

우리는 현재 WAS 제품군 중에서 Apache Tomcat 9 버전을 이용한다 

- 자바 웹 어플리케이션 개발 환경 설정 
	0. WAS 인 Apache Tomcat 9 버전 다운로드 후 압축해제 
	1. Apache Tomcat\conf\server.xml 에서 port 를 8080 에서 8888 로 변경 -> oracle web port와 중복되므로 
											URIEncoding="utf-8" 설정 추가 -> http get 방식 요청 데이터의 한글 처리를 위해 
											
	2.  Apache Tomcat\conf\context.xml 에서  reloadable="true"  , 서버 프로그램 변경시 서버 restart 없이 자동 리로드 
	
-  Client Side Script 				   
HTML : web document 의 컨텐트를 담당 
CSS : web document 디자인 스타일 담당 
JavaScript : web document 행위 담당 
			   ECMAScript 표준을 준수하는 스크립트 언어 
			   ECMA 인터내셔널 : 정보 통신 표준을 제정하는 표준화 기구 
			   
ES5 (ECMA5, 2009) : 변수 선언 var -> 중복 선언 가능 , Function-level scope 
ES6 (ECMA6, 2015) : 변수 선언 let -> 중복 선언 불가 , Block-level scope 
						  const 상수 , arrow function ( 화살표 함수 ) 등이 새롭게 추가 
						  
DOM ( Document Object Model ) : javascript 에서 Html(web) 문서(document) 의 요소(element)를 
									   제어하기 위한 프로그래밍 인터페이스(제어 방법)를 제공한다 
									   
									   웹브라우저에서 지원 
									   HTML 문서 요소를 계층적으로 지원 ( Dom Tree ) 
									   각 요소들을 자바스크립트에서 제어하고 조작하기 위한 
									   함수를 제공 				   
				   	
	
- Server Side : Servlet & JSP 

- Servlet :  Java Web Programming의 기반 기술
			  Model 2 MVC ( Web MVC ) 의 Controller 역할을 담당  
			  java class 개발 방식 
			  
- JSP : Java Server Page ,  서버 사이드에서 동적인 웹문서를 생성하는 템플릿 엔진 역할을 담당 		
		 html 내에 java code 삽입하는 개발 방식 -> 웹문서 구현에 장점 
		 jsp 는 WAS ( Web Container ) 에 의해 Servlet class 로 생성됨 	  
		Model 2 MVC ( Web MVC ) 의 View 역할을 담당  

- Web MVC or Model2 MVC => 이후 공부예정 
   Model : 비즈니스 로직과 데이터 액세스 로직을 담당 
   			 java component(or java beans) 가 담당 : DAO, Service , VO 등 
   View : 클라이언트에게 동적인 화면을 제공 
   		   jsp가 담당 			  
   Controller : 제어자의 역할 , 클라이언트 요청 분석 후 모델과 연동 , 적절한 view를 선택
   				 Servlet 이 담당 
   				 
 - Java Web Application 설정 방식 
 	1) xml 설정 방식 :  WEB-INF\web.xml => DD ( Deployment Descriptor : 배포기술서 )
 						  소스 코드와 설정이 분리  
 						  
 		
 	2) Annotation 설정 방식 :  의미있는 주석 => 설정 정보의 역할 
 								 소스 코드 상에서 설정 정보를 기술   				 
	


    web.xml 의 예 :  client 가  hello url 로 요청하면  step1.HelloServlet가 실행된다 
    <servlet>   
    <servlet-name>HelloServlet</servlet-name>
    <servlet-class>step1.HelloServlet</servlet-class>
    </servlet>
	<servlet-mapping>
	<servlet-name>HelloServlet</servlet-name>
	<url-pattern>/hello</url-pattern>
	</servlet-mapping>
    
   - Http Request Method ( 요청 방식 ) 
   get 요청방식 : 정보 조회용 , url 상에 전달하는 정보가 노출(url 상에 데이터 전송) , 전송 데이터 용량에 제한 
   post 요청방식 : 정보 전송용 , url 상에 정보가 노출되지 않음 , 전송 데이터 용량에 제한이 없음 
   					 별도의 한글처리가 필요 (http request body 영역으로 데이터 전송) 
   					(ex - 로그인시 , 파일 업로드시에는 post 방식을 이용해야 함 ) 
    
   **webstudy06-servlet-basic-form** 
   
Annotation 기반 Servlet 설정 : 서블릿 3.0 이상에서 지원 
								  @WebServlet(url-pattern)
								  : url-pattern 은 해당 서블릿을 서비스 받기 위해
								  클라이언트 측에서 명시해야 하는  action 즉 
								  서버 프로그램 자원의 위치를 말한다 
								  
					 ex)  @WebServlet("/hello") 
					 
					 http://127.0.0.1:8888/webstudy06-servlet-form/hello
   				protocol     ip          port   context-path             url-pattern 
   												 (web application명) 		
   
   


**Query String**
 http://localhost:8888/webstudy06-servlet-basic-form/joy?menu=쌀국수&singer=김훈진
 http: protocol 
 localhost : domain name , ip로도 가능 
 8888 : port ( apache-tomcat port ) 
 webstudy06-servlet-basic-form :  web application 명 ( context-path ) 
 joy : url-pattern 
 ? : 구분자 ( url-pattern 과 query string 을 구분 ) 
 menu=쌀국수&singer=김훈진   ==> query string 
 menu=쌀국수 : name=value   ( query string )  
 & : query string 을 여러개 보내기 위한 구분자 
 singer=김훈진 : name=value 
    
 **html form 과 Servlet 연동**
 
 HTML																		Servlet or JSP 
 																		 	XML		    Annotation 
 action : 처리할 서버 프로그램 url 										web.xml  또는 @WebServlet(url-pattern) 에 지정 
 method : http request method ( get 과 post ) 						doGet(request,response) or doPost(request,response)
 																			Post 방식일 경우에는 request.setCharacterEncoding("utf-8");
 <form action="url-pattern" method="get or post">     ======>     String data=request.getParameter("food");// food는 name                 
    <input type="text" name="food">
    <button type="submit">전송</button>
 </form>   
    
  -------
  url 로 표현 
  http://127.0.0.1:8888/webstudy7/url-pattern?food=김밥&count=5 
   
    


- 서블릿 계층구조 ( Servlet Hierarchy ) 

최상위 인터페이스 
<<interface>>
  Servlet      주요 LifeCycle 메서드  init() -> service() -> destroy()
  
  
 <<abstract class>>
 GenericServlet :  Servlet Interface를 구현(implements)하는 abstract class 
 					 프로토콜에 독립적인 class 
 					 일반적인 서버 프로그램이 가져야 하는 기능을 자식에게 물려주고 
 					 자식 차원에서 구현해야 하는 service()  메서드는 abstract 로 선언해 
 					 구현을 강제한다 
 					 
 <<abstract class>>
 HttpServlet : GenericServlet 을 상속받는 abstract class 
 				Http Protocol 에 최적화된 멤버를 자식 서블릿 클래스에게 물려준다 
 				일반적으로 개발하는 모든 서블릿과 JSP 는 이 HttpServlet을 
 				상속받는다 
 				
  Servlet API 설계방식 특징 
  : 일반 웹어플리케이션 개발 진영에서는 
    표준화된  Servlet API ( ServletRequest, ServletResponse, HttpSession 등 ) 
    를 이용해 개발 ,  실제 동작은 Servlet API, 즉 Interface 들을 구현한 
    다양한 WAS 제품군(Apache-Tomcat,JBOSS, Weblogic...)들이 동작된다
    
    다양한 WAS 에 관계없이 표준화된 하나의 방식으로 자바 웹 개발이 가능 -> 생산성 향상 
    구축된 웹어플리케이션이 기존 WAS 에서 다른 WAS 환경으로 변경되어도 
    영향이 없다 -> 웹어플리케이션과 WAS 의 결합도 낮아짐 -> 유지보수성 향상 
    
  **Servlet Life Cycle**
  서블릿 jsp 의 최상위 인터페이스 Servlet의 abstract method 인 
  init() -> service() - > destroy() 가 있음 
  이 세가지 라이프 사이클 메서드를 WAS ( Web Container ) 가 호출하여 실행된다 
  
  init() : 객체 생성 후 서블릿 초기화 작업을 위해 한번 실행 
  service() : client 요청시마다 실행, 요청에 응답을 매번 수행한다 
  destroy() : 서비스 해제 직전에 한번 실행 
  
  5명의 클라이언트가 동일한 서블릿에 요청한 상태 
  init() : 1번 
  service() : 5번
  destroy() : 0번 -> 서비스 종료 전에 한번 실행 
  
  - Servlet LifeCycle 구조 
  									WAS(Web Server + Web Container)
  									
  client browser --request-->	is loaded? -- no -- servlet class loading
  										|						|
  										|					서블릿 객체 생성 : 단 한번 실행 
  										|						|
  										yes					init() 호출 : 단 한번 실행 
  										|						|	 
  										|--->		       service() 호출 : 매 요청시 실행 
  										
  										
  										               destroy() : 서비스 종료 전에 한번 실행 
  
  
**Servlet LifeCycle & ServletConfig & ServletContext** 
<load-on-startup>1</load-on-startup>    
:  WAS 시작 시에 미리 서블릿을 초기화 시킨다 

   Servlet LifeCycle 특성상  클라이언트의 첫번째 요청시  서블릿객체생성, init () 실행 후 
   service 계열 메서드가 실행되어 클라이언트에게 응답된다 
   첫번째 클라이언트의 요청에 대해서 응답이 느려질 경우를 대비해 
   WAS 시작 시점에 지정한 서블릿의 객체 생성과 init 즉 초기화 작업을 미리 수행하도록 
   XML : web.xml 또는 Annotation: @WebServlet 에서 load on startup 옵션을 지정할 수 있다 
   

- ServletConfig 와 ServletContext 

ServletConfig : 서블릿 설정정보 객체 
				 서블릿 당 하나 생성됨 
				 웹컨테이너(or Servlet Container)가 init(ServletConfig config) 을 실행할 때 
				 ServletConfig interface 타입의 구현체를 해당 서블릿으로 전달한다 
				 ServletConfig 객체는 해당 서블릿이 실행되는 데 필요한 설정 정보와 
				 ServletContext 객체의 주소값을 가지고 있다 
				 
				 ex)  서블릿은 사원 , ServletConfig 는 사원증 

 ServletContext :  웹어플리케이션 내의 모든 자바웹프로그램(Servlet, JSP) 들이 
 					 공유하는 환경 정보 
 					 웹 어플리케이션 당 하나 생성 
 					 WAS 가 웹 어플리케이션을 처음 시작할 때 ServletContext 객체가 생성되고
 					 종료하기 직점에 ServletContext 객체가 소멸된다 
 					 
 				ex)  웹어플리케이션 : 회사 
 					  ServletContext : 사내 인트라넷 

- ServletContextListener : Application LifeCycle Listener
							  웹어플리케이션 시작 시점과 종료 시점의 이벤트를 감지하여
							  시작시점에 필요한 초기화 작업과 
							  종료시점에 필요한 작업을 정의해 실행 시킬 수 있다 
							  
	ServletContextListener Interface 의 abstract method 						  
							  contextInitialized() : 웹어플리케이션 시작 시점에 호출되는 메서드
							  contextDestroyed() : 웹어플리케이션 종료 직전에 호출되는 메서드 
							  
**webstudy09-Cookie-Session-inst**

Cookie와 Session이 필요한 이유 
-> HTTP 가 Stateless 한 특성을 가지기 때문 

HTTP 의 특성 : Stateless 
				  상태 유지하지 않는다 
				  접속한 사용자 정보를 유지하지 않는다 
				  많은 사용자에게 서비스해야 하는 서버는 
				  자원을 효과적으로 사용하기 위해 요청에 대한 응답이 되면
				  연결을 해제하고 사용자를 유지하지 않는다 

사용자 정보를 유지해야 할 필요가 있을 경우(장바구니, 인증기반 커뮤니티 등)에는
세션 관리가 필요하다  

세션 관리 : 사용자 정보를 일정 조건동안 유지 

사용자 정보를 유지하는 방식 ( 상태 정보를 유지하는 방식 ) 
1. Cookie 
   클라이언트 측에 저장하는 작은 정보  
   저장 용량에 제한 ( 4kb ) 
   저장 데이터 타입의 제한 , 문자열만 가능 	
   	
   Cookie 생성시 유효시간을 설정하지 않으면 브라우저 실행시에만 유효,
   유효시간 설정하면 그 유효시간까지 해당 Cookie는 지속되어 사용할 수 있다 
   
   step1. 서블릿이 쿠키 생성해서 클라이언트 측에 저장 
   
   클라이언트가 서버에 접속할 때 서버 프로그램이 클라이언트 측으로 
   쿠키를 전송하고 클라이언트 측에 저장한다. 
   										WAS
   client browser -- request -->	SetCookieServlet
   										Cookie 생성 ( name, value ) 
   										cookie.setMaxAge(30); // 30초간 유효하도록 쿠키 설정 
   										response.addCookie(cookie); // 응답시 쿠키를 클라이언트에 전달 
   					 <--response--
   		  cookie 저장 			 
   					 
   step2. 클라이언트가 접속하면 쿠키 존재여부를 확인하고 후속 작업 수행  
   										WAS 
   client browser -- request -->	GetCookieServlet	
   									    request.getCookies() : Cookies[] 
   									    cookies[i].getName() 과 getValue() 를 이용해 쿠키 정보 이용 
   				   <-- response -- 	
		
2. Session
   사용자 정보를 서버 측에 저장 
   저장 데이터의 타입 및 용량에 제한이 없음 ( but 쿠키는 문자열 타입만 가능하고 4kb 로 저장용량이 제한 ) 
   로그인, 로그아웃시에 세션이 이용된다 
   
   세션 유효 기간 ( WAS 의 conf/web.xml 에 session timeout 설정 : apache tomcat 기본 설정은 30분) 
   1) 지정한 유효시간 내에 새로운 요청이 없으면 세션 만료 
   2) 브라우저 종료시 세션 만료 
   3) 로그아웃시 세션 만료 
   				  
   HttpSession 관련 주요 메서드 
   
   HttpServletRequest 의 method 
   -  request.getSession();  or request.getSession(true); 
      : 기존 세션이 없으면 새로 생성해서 반환, 있으면 기존 세션을 반환     
   - request.getSession(false) : 기존 세션이 없으면 null 반환 , 있으면 기존 세션을 반환 
   
   HttpSession 의 method 
   - session.setAttribute(name,value) : 세션 객체에 name 과 value 쌍으로 정보를 저장    
   - session.getAttribute(name) : Object    ->  name 을 이용해 세션에 저장된 정보를 반환    
   - session.invalidate() :  세션을 무효화시킴. 주로 로그아웃시 사용 
   
   - Session 과 Cookie 관계 
   
   세션 생성 
   										LoginServlet
   client browser  ---request--->  request.getSession(); // 기존 세션이 있으면 기존 세션 반환, 없으면 새로 생성 
    				
    				<--response--				
          jsessionid name cookie가 저장
          value는 id 
          								ServiceServlet	
   client browser  ---request--->  request.getSession(false);  기존 세션이 없으면 null 반환         
    									-> getSession 메서드 내부에서 client 측의 jsessionid cookie를 
    									   확인해서 적절한 session id가 존재하면 기존에 세션이 있다고 판단 
    

    
 **JSP 기초**   
    
   JSP : Java Server Page  
   		  서버 측에서 웹페이지를 동적으로 생성하는 기술 
   		  HTML 에 자바 코드를 삽입하는 형식으로 개발 -> 동적 웹 페이지 구현에 적합 	
   		  자바 서버 사이드 웹페이지 생성하는 기술 => Template Engine 
   		  												  (  JSP , Thymeleaf 등 ) 
   		  Model2 MVC or WebMVC  에서 View 역할을 한다 
   		  
   	
   	JSP 기본 문법 	   												   
    
    1) JSP 주석 : <%--    --%>   참고) HTML 과 XML 주석 <!--  --> 
    2) Scriptlet 스크립틀릿 :    <%     %>   service 메서드 내에 삽입되는 자바 코드 
    3) Expression 출력 : <%=  %>  service 메서드 내에 삽입되는 출력 코드 out.print() 
    4) Declaration 선언 : <%!=  %> 멤버 변수 또는 메서드 정의시 사용 
    5) Directive 지시 : <%@   %> 웹 컨테이너에게 현 페이지 정보를 알리는 역할( import, encoding, errorPage 등 )  
     								 
 - JSP LifeCycle : JSP 는 HttpServlet 의 자식 클래스로 생성되므로 서블릿 라이프 사이클과 동일 
 					 JSP 가 Web Container 에 의해 .java 코드로 생성되고 .class 로 컴파일된다 
 					 이 클래스(Servlet)가 실행되어 클라이언트에게 서비스한다 
 					 
 					 	WAS(Web Container)
 	client browser -- is loaded?	-- no --  .jsp -> .java -> .class
 							|						|
 							|					class loading
 							|						|
 							|					object 생성 
 							|						|
 							|					init(ServletConfig) : jsp 가 처음 서비스할 때 한번 실행
 							|						|
 							|--yes--->		service(request,response) : 요청시마다 매번 실행 						
 						
 						<---- response--							
 						
 						  destroy() : 서비스 종료 전에 한번 호출 
 													
 															
 	**webstudy12-jsp-form2**
 	
 	- Query String ( 쿼리 스트링 ) : 웹프로그램에 입력데이터를 전달하는 방법 
 	
 	   http://localhost:8888/webstudy10/step1-action.jsp?userName=아이유&userAge=22												
 	protocol   domain  port context-path url-pattern ? query string 	
 	? : URL 과 Query String 구분자 
 	& : 여러 쌍의 데이터를 전달할 때 사용 
 	
   - JavaScript Event 처리 관련 
     onclick : 클릭 이벤트 
     onchange : value 변경시 발생 이벤트 
     onkeyup : 키를 눌렀다가 뗄 때 발생하는 이벤트 
     onsubmit : form 전송시 발생하는 이벤트 
     
    - length , length() , size() 
    
    java 와 javascript 배열 길이 :  length 
    java String 문자열 길이 : length() 
    java list 의 길이 : size() 
    
   **webstudy13-Model1**
   
   Software Architecture 소프트웨어 아키텍쳐 
   : 소프트웨어 아키텍쳐(설계구조 or 설계양식)는 소프트웨어 구성 요소(component or java bean) 들 사이의 
     관계를 표현하는 것을 말함 
    
   초기 개발 방식 :  Servlet or JSP  <--> Database   
   샘플예제 : step1-jsp-db.jsp 
     
   Model 1 Architecture :  JSP <--> Java Beans <--> Database 
   샘플예제 :      step2-model1.jsp    MemberDAO 
   
   Model1 에서 JSP 역할 :  client 에게 form 과 같은 화면 제공 ,
   							   client 가 보낸 요청을 분석 
   							   요청에 따른 java bean(DAO..) 과 연동
   							   결과를 클라이언트에게 응답 
   							   
   Model1 에서 Java Beans 역할 :  bean == component 와 동일한 의미 
   									   business logic 과 data access logic 을 담당 	 							    
   
   
   Model 1 -> Model 2  아키텍쳐 변화의 특징 
   
   -> java beans 역할은 동일 , MVC 의 Model 영역 
   -> Model 1 에서 jsp 가 담당하는 역할이 분화 :  Controller와 View로 분업화 
   
   
   Model 2 Architecture : MVC Design Pattern 
   										Controller		
   							 View	    				Model <--> Database 
    
   MVC는 Model2 아키텍쳐의 근간을 이루는 Design Pattern 이다 
   자바(or 스프링) 웹어플리케이션 설계 방식의 근간을 이루는 디자인 패턴이 MVC다 
   
   Model : Business Logic 과 Data Access Logic 을 담당 / Java Component(or Bean ) 가 담당 ( DAO, Service, VO , DTO .. )
   View : client 에게 response 즉 응답을 담당 , 화면 표현 / JSP 가 담당 
   Controller : client 의 request를 분석, Model 과 연동 ,
                연동결과를 적절한 View를 선택(forward or redirect)해 응답하게 한다 / Servlet 이 담당 
                
   - Controller 에서 View로 제어를 이동하는 방식 , View 를 선택하는 방식      
     forward 방식과 redirect 방식              
   
     1. forward 이동방식 
     	기존 request와 response 유지시킨 채 제어를 이동한다 => 주로 정보 조회시 사용
     	 
     	WAS(Web Container) 상에서 이동되므로 클라이언트 측 url 은 변동이 없다 
     	즉 클라이언트 측은 이동된 것을 알지 못한다 
     	이런 특성으로 클라이언트 측에서 새로고침(f5)시에는 기존 동작이 반복된다 
     	-> 등록,삭제,수정에는 적합하지 않다 
    
     2. redirect 이동방식 
        클라이언트 브라우저에게 이동 url 을 지정 , 등록 수정 삭제 작업에 적합 
        기존 request와 response는 유지되지 않고 새로운 request, response 가 생성됨 
     	클라이언트 측으로 이동할 url 을 지정해서 브라우저가 이동해 view 정보를 보도록 이동하는 방식 
    
   - Singleton Design Pattern
   :  시스템 상에서 단 하나의 객체를 생성하고 공유해서 사용하는 설계 패턴  
       => 특정 클래스의 인스턴스를 하나만 생성해서 사용해 서버의 자원을 효율적으로 사용 
       
	   적용단계 	
       1. private 생성자 : 생성자에 private access modifier를 명시해서 다른 클래스에서 생성하는 것을 원천적 차단 
       
       2. private static 변수:  static 변수는 class loading 시 단 한번 초기화 되는 속성을 이용해 
       							  자신의 객체를 생성해 static 변수에 저장한다 
       							    
       3. public static 메서드로 공유 : static method는 별도의 객체 생성없이 클래스로 접근해 
       									 사용 가능한 속성을 이용해 한번 생성한 자신의 객체 주소값을 
       									 외부에 공유  
     								 
       
       ex)     public class Company{
       				// 자신의 객체를 생성해 static 변수에 할당 , class loading 시 한번 실행 
       				private static Company instance=new Company();
       				private Company(){} // 외부에서 객체 생성 불가하게  private 명시 
       				public static Company getInstance(){// 외부에서 접근해 사용하도록 공유 
       					return instance;
       				}
       		   }
       
       
   - View : EL 과 JSTL 
   
     EL - Expression Language , jsp 버전 상승하면서 기존의  <%=  %> 을 더 간단하고 효과적으로 사용할 수 있도록 지원한다
     	   기존 jsp 방식 <%= %>     
     	   EL 방식 ${ }	
     	   
     	   사례 : Controller ( Servlet ) 에서  request.setAttribute("member",new MemberVO("java","a","아이유","오리"));
     	   		  로 저장한 후 forward 방식으로  View ( jsp ) 에 제어를 이동했을 때 
     	   				    	     
     	    	   View ( jsp ) 에서는 
     	    	   기존 jsp 방식     	
     	    	   <%@ import="org.kosta.webstudy16.model.MemberVO" %>
     	    	   <% 
     	    	   		MemberVO mvo=(MemberVO)request.getAttribute("member");
     	    	   %>   
     	    	   회원명 <%=mvo.getName()%>  주소 <%=mvo.getAddress()%>
     	        
       			   EL 방식 :  별도의 import 과정 필요없음, 객체 캐스팅이 필요없음 	
     			   회원명 ${requestScope.member.name}	주소 ${requestScope.member.address}
     			   더 줄여 표현하면 
     			   회원명 ${member.name}	주소 ${member.address}
   
             사례 2 )  client 가 전달한 query string 또는 form data 를  EL 로 표현할 때는 
             			http://127.0.0.1:8888/webstudy16/TestServlet?nick=슈&age=10
             			=> jsp EL 에서는  ${param.nick}    ${param.age+2}   <%-- 별도 형변환없이 가능  --%>
   
   
 ** EL ( Expression Language ) ** 
  JSP 버전이 상향되면서 추가된 스크립트 언어
  기존 Scriptlet tag의 표현식 ( <%= %> ) 의 업그레이드 된 버전 ( ${  } ) 
  JSP 속성영역 ( request, session, application(ServletContext) ) 에 저장된 객체의 property 를 출력하는 용도 
  EL을 이용하면 별도의 import , Object Casting 절차 필요없이 바로 출력이 가능 , 다양한 연산 및 자동 형변환이 된다 
  JSTL 과 연동이 가능 
  EL은 Model 객체의 get계열 메서드와 is계열의 메서드에만 접근 가능 

 **  JSTL( Jsp Standard Tag Library ) ** 
    View(jsp) 에서 자주 사용하는 기능 ( 조건문 , 반복문, 자료구조의 데이터 표현 )을 
    미리 구현해 놓은 태그 라이브러리 
    EL 과 함께 사용해서 View 로직과 데이터를 표현    

   환경설정 :  WEB-INF\lib\jstl-1.2.jar  파일을 위치시킨다 
   다운로드 경로 : https://mvnrepository.com/artifact/javax.servlet/jstl/1.2   
    
 **webstudy18-mvc-member-login-inst**
  work flow 
 
  index.jsp          ------->       LoginServlet 	<--> MemberDAO <------------------> DB 
  															   login(id,password) : MemberVO
  										세션에 회원정보를 할당 					   
  비로그인상태에서는   <---  로그인 성공시 redirect
  로그인폼을 제공 						로그인 실패시에는 
  											|
  										  login-fail.jsp  ( alert ) 
  										  후  index.jsp 	
    
  로그인 상태일때는 
  프라하에 사는 다경님 로그인 
  로그아웃버튼  	 ---------->   LogoutServlet 
  										session.invalidate()
  										redirect 
  										후 index.jsp 로 이동시킨다 
  
 **webstudy19-mvc-front-controller-pattern-ver1**
  
  - Front Controller Design Pattern 
  	: 모든 클라이언트 요청을 하나의 진입점으로 통합하여 처리하는 설계 패턴
  	
  	웹 어플리케이션 서비스의 공동 정책을 일관성 있고 효과적으로 처리할 수 있다.
  	-> 인코딩, 인증, 예외처리, 데이터 수집 등
  	
  	FrontController 적용전 Web MVC 구조
  	
  	구성)
  	client1 - - FindMemberById(Servlet) - - Model
  	client3 - - 
  	
  	client2 - - RegisterMember(Serlvet) - - Model
  	cleint4 - - 이런식으로 
  	
  	FrontController 적용후 Web MVC 구조 Version 1
  	
  	client1 - - FrontControllerServlet - - Model
  	client2 			doGet()과 doPost()(->한글처리 포함)에서는 doDispatch() 를 호출
  	client3
  	client4
  	
  	하나의 프론트 컨트롤러 서블릿이 여러 요청을 구분하기위해
  	hidden 방식을 이용한다.
  
  	client 
  	<input type="hidden" name="command" value="find">
  	
  	FrontControllerServlet 에서는 command 정보를 이용해 요청을 구분한다.
  	String command = request.getParameter("command");
  	if(command.equals("find")){
  		
  	} else if (command.equals("update"){
  	
  	}
  	
  	위와 같은 구조로 여러 클라이언트의 요청을 하나의 진입점으로 모아보았다.
  	이 경우 FrontControllerServlet의 doDispatch 메소드의 코드량이 요청이 늘어날 수록 
  	비대해 질 수 밖에 없는 구조로 개선이 필요하다. (refactoring(내부구조개선)이 필요하다)
  	refactoring : 결과의 변경 없이 코드의 구조를 재조정
  							입출력은 동일하나 시스템의 내부 구조를 개선하는 활동
  						  가독성, 재사용성, 유지보수성 향상이 목적

	refactoring 1안 :요청에 대한 처리를 메소드 별로 분화해보자.
					   2안: 메소드 별로 분화하는 1안은 FrontControllerServlet class 자체가 커지므로 요청 처리를 전담할 controller class를 별도로 생성해서 관리하자.  						 
   	
   1안 - 메소드별로 분화 FrontControllerServletVer2
   2안 - 클래스별로 분화 FrontControllerServletVer3
   
    Front Controller Design Pattern Version 3
 * 모든 클라이언트의 요청을 하나의 진입점으로 모은다. -> 공통 정책 수행 (인코딩, 인증, 예외처리,..)
 * 클라이언트 요청을 처리할 별도의 Controller 클래스로 분화하여 서비스한다.
 * 
 * 토론점 : doDispatch 내부에서 개별 컨트롤러 객체 생성 후 실행시 
 * 				 각 컨트롤러 객체의 내부 구현부를 확인해서 각각 다르게 실행해야 하는 단점이 존재한다.
 * 				 -> 인터페이스를 통한 표준화, 다형성 적용 환경을 마련하면 된다.
				Controller interface의 handleRequest(request, response) : String
    
    
    
    
    
    
    
    
    
     
     
     
     
     
     
     
     
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 												
 													
 													
 													
 													 			 
 
 
 
 
 
 
  



	
	
	
	
	
	
	
	
	
	
	
	













